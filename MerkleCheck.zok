import "hashes/pedersen/512bit" as hash;
import "hashes/utils/256bitsDirectionHelper" as multiplex;

const u32 DEPTH = 7;
const u32 round = 8;
const u32 round1 = round + 1;

// Merke-Tree inclusion proof for tree depth 4 using sha256
// directionSelector => true if current digest is on the rhs of the hash

def main(u32[round1][8] root, private bool[round][DEPTH] directionSelector, private u32[round][DEPTH][8] path, private u32[round][8] origin, private u32[round][8] changed) {

	for u32 i in 0..round {
        // Loop up the tree
        u32[8] mut digest = origin[i];
	    for u32 j in 0..DEPTH {
            u32[16] preimage = multiplex(directionSelector[i][j], digest, path[i][j]);
		    digest = hash(preimage);
	    }
        assert (digest == root[i]);
        digest = changed[i];
        for u32 j in 0..DEPTH {
            u32[16] preimage = multiplex(directionSelector[i][j], digest, path[i][j]);
		    digest = hash(preimage);
	    }
        assert (digest == root[i+1]);
    }
}